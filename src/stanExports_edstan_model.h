// Generated by rstantools.  Do not edit by hand.

/*
    edstan is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    edstan is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with edstan.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_edstan_model_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_edstan_model");
    reader.add_event(208, 206, "end", "model_edstan_model");
    return reader;
}
template <typename T1__, typename T2__>
typename boost::math::tools::promote_args<T1__, T2__>::type
pcm(const int& y,
        const T1__& theta,
        const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& beta, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 4;
        validate_non_negative_index("unsummed", "(rows(beta) + 1)", (rows(beta) + 1));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> unsummed((rows(beta) + 1));
        stan::math::initialize(unsummed, DUMMY_VAR__);
        stan::math::fill(unsummed, DUMMY_VAR__);
        current_statement_begin__ = 5;
        validate_non_negative_index("probs", "(rows(beta) + 1)", (rows(beta) + 1));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> probs((rows(beta) + 1));
        stan::math::initialize(probs, DUMMY_VAR__);
        stan::math::fill(probs, DUMMY_VAR__);
        current_statement_begin__ = 6;
        stan::math::assign(unsummed, append_row(rep_vector(0.0, 1), subtract(theta, beta)));
        current_statement_begin__ = 7;
        stan::math::assign(probs, softmax(cumulative_sum(unsummed)));
        current_statement_begin__ = 8;
        return stan::math::promote_scalar<fun_return_scalar_t__>(categorical_log((y + 1), probs));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct pcm_functor__ {
    template <typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T1__, T2__>::type
    operator()(const int& y,
        const T1__& theta,
        const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& beta, std::ostream* pstream__) const {
        return pcm(y, theta, beta, pstream__);
    }
};
template <typename T0__, typename T1__, class RNG>
int
pcm_rng(const T0__& theta,
            const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& beta, RNG& base_rng__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef int fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 12;
        validate_non_negative_index("unsummed", "(rows(beta) + 1)", (rows(beta) + 1));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> unsummed((rows(beta) + 1));
        stan::math::initialize(unsummed, DUMMY_VAR__);
        stan::math::fill(unsummed, DUMMY_VAR__);
        current_statement_begin__ = 13;
        validate_non_negative_index("probs", "(rows(beta) + 1)", (rows(beta) + 1));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> probs((rows(beta) + 1));
        stan::math::initialize(probs, DUMMY_VAR__);
        stan::math::fill(probs, DUMMY_VAR__);
        current_statement_begin__ = 14;
        stan::math::assign(unsummed, append_row(rep_vector(0.0, 1), subtract(theta, beta)));
        current_statement_begin__ = 15;
        stan::math::assign(probs, softmax(cumulative_sum(unsummed)));
        current_statement_begin__ = 16;
        return stan::math::promote_scalar<fun_return_scalar_t__>((categorical_rng(probs, base_rng__) - 1));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct pcm_rng_functor__ {
    template <typename T0__, typename T1__, class RNG>
        int
    operator()(const T0__& theta,
            const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& beta, RNG& base_rng__, std::ostream* pstream__) const {
        return pcm_rng(theta, beta, base_rng__, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_edstan_model
  : public stan::model::model_base_crtp<model_edstan_model> {
private:
        int I;
        int J;
        int N;
        std::vector<int> ii;
        std::vector<int> jj;
        std::vector<int> y;
        int K;
        matrix_d W;
        std::vector<int> pos_s;
        std::vector<int> pos_e;
        vector_d prior_alpha;
        vector_d prior_beta_base;
        vector_d prior_beta_step;
        std::vector<vector_d> prior_lambda;
        int flag_varying_slope;
        int flag_thresholds;
        int flag_replicates;
        int S;
        std::vector<int> m;
public:
    model_edstan_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_edstan_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_edstan_model_namespace::model_edstan_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 22;
            context__.validate_dims("data initialization", "I", "int", context__.to_vec());
            I = int(0);
            vals_i__ = context__.vals_i("I");
            pos__ = 0;
            I = vals_i__[pos__++];
            check_greater_or_equal(function__, "I", I, 2);
            current_statement_begin__ = 23;
            context__.validate_dims("data initialization", "J", "int", context__.to_vec());
            J = int(0);
            vals_i__ = context__.vals_i("J");
            pos__ = 0;
            J = vals_i__[pos__++];
            check_greater_or_equal(function__, "J", J, 1);
            current_statement_begin__ = 24;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 1);
            current_statement_begin__ = 25;
            validate_non_negative_index("ii", "N", N);
            context__.validate_dims("data initialization", "ii", "int", context__.to_vec(N));
            ii = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("ii");
            pos__ = 0;
            size_t ii_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < ii_k_0_max__; ++k_0__) {
                ii[k_0__] = vals_i__[pos__++];
            }
            size_t ii_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < ii_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "ii[i_0__]", ii[i_0__], 1);
                check_less_or_equal(function__, "ii[i_0__]", ii[i_0__], I);
            }
            current_statement_begin__ = 26;
            validate_non_negative_index("jj", "N", N);
            context__.validate_dims("data initialization", "jj", "int", context__.to_vec(N));
            jj = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("jj");
            pos__ = 0;
            size_t jj_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < jj_k_0_max__; ++k_0__) {
                jj[k_0__] = vals_i__[pos__++];
            }
            size_t jj_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < jj_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "jj[i_0__]", jj[i_0__], 1);
                check_less_or_equal(function__, "jj[i_0__]", jj[i_0__], J);
            }
            current_statement_begin__ = 27;
            validate_non_negative_index("y", "N", N);
            context__.validate_dims("data initialization", "y", "int", context__.to_vec(N));
            y = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("y");
            pos__ = 0;
            size_t y_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
                y[k_0__] = vals_i__[pos__++];
            }
            size_t y_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < y_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "y[i_0__]", y[i_0__], 0);
            }
            current_statement_begin__ = 28;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            check_greater_or_equal(function__, "K", K, 1);
            current_statement_begin__ = 29;
            validate_non_negative_index("W", "J", J);
            validate_non_negative_index("W", "K", K);
            context__.validate_dims("data initialization", "W", "matrix_d", context__.to_vec(J,K));
            W = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(J, K);
            vals_r__ = context__.vals_r("W");
            pos__ = 0;
            size_t W_j_2_max__ = K;
            size_t W_j_1_max__ = J;
            for (size_t j_2__ = 0; j_2__ < W_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < W_j_1_max__; ++j_1__) {
                    W(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 31;
            validate_non_negative_index("pos_s", "I", I);
            context__.validate_dims("data initialization", "pos_s", "int", context__.to_vec(I));
            pos_s = std::vector<int>(I, int(0));
            vals_i__ = context__.vals_i("pos_s");
            pos__ = 0;
            size_t pos_s_k_0_max__ = I;
            for (size_t k_0__ = 0; k_0__ < pos_s_k_0_max__; ++k_0__) {
                pos_s[k_0__] = vals_i__[pos__++];
            }
            size_t pos_s_i_0_max__ = I;
            for (size_t i_0__ = 0; i_0__ < pos_s_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "pos_s[i_0__]", pos_s[i_0__], 0);
            }
            current_statement_begin__ = 32;
            validate_non_negative_index("pos_e", "I", I);
            context__.validate_dims("data initialization", "pos_e", "int", context__.to_vec(I));
            pos_e = std::vector<int>(I, int(0));
            vals_i__ = context__.vals_i("pos_e");
            pos__ = 0;
            size_t pos_e_k_0_max__ = I;
            for (size_t k_0__ = 0; k_0__ < pos_e_k_0_max__; ++k_0__) {
                pos_e[k_0__] = vals_i__[pos__++];
            }
            size_t pos_e_i_0_max__ = I;
            for (size_t i_0__ = 0; i_0__ < pos_e_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "pos_e[i_0__]", pos_e[i_0__], 0);
            }
            current_statement_begin__ = 34;
            validate_non_negative_index("prior_alpha", "2", 2);
            context__.validate_dims("data initialization", "prior_alpha", "vector_d", context__.to_vec(2));
            prior_alpha = Eigen::Matrix<double, Eigen::Dynamic, 1>(2);
            vals_r__ = context__.vals_r("prior_alpha");
            pos__ = 0;
            size_t prior_alpha_j_1_max__ = 2;
            for (size_t j_1__ = 0; j_1__ < prior_alpha_j_1_max__; ++j_1__) {
                prior_alpha(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 35;
            validate_non_negative_index("prior_beta_base", "2", 2);
            context__.validate_dims("data initialization", "prior_beta_base", "vector_d", context__.to_vec(2));
            prior_beta_base = Eigen::Matrix<double, Eigen::Dynamic, 1>(2);
            vals_r__ = context__.vals_r("prior_beta_base");
            pos__ = 0;
            size_t prior_beta_base_j_1_max__ = 2;
            for (size_t j_1__ = 0; j_1__ < prior_beta_base_j_1_max__; ++j_1__) {
                prior_beta_base(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 36;
            validate_non_negative_index("prior_beta_step", "2", 2);
            context__.validate_dims("data initialization", "prior_beta_step", "vector_d", context__.to_vec(2));
            prior_beta_step = Eigen::Matrix<double, Eigen::Dynamic, 1>(2);
            vals_r__ = context__.vals_r("prior_beta_step");
            pos__ = 0;
            size_t prior_beta_step_j_1_max__ = 2;
            for (size_t j_1__ = 0; j_1__ < prior_beta_step_j_1_max__; ++j_1__) {
                prior_beta_step(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 37;
            validate_non_negative_index("prior_lambda", "2", 2);
            validate_non_negative_index("prior_lambda", "K", K);
            context__.validate_dims("data initialization", "prior_lambda", "vector_d", context__.to_vec(K,2));
            prior_lambda = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(K, Eigen::Matrix<double, Eigen::Dynamic, 1>(2));
            vals_r__ = context__.vals_r("prior_lambda");
            pos__ = 0;
            size_t prior_lambda_j_1_max__ = 2;
            size_t prior_lambda_k_0_max__ = K;
            for (size_t j_1__ = 0; j_1__ < prior_lambda_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < prior_lambda_k_0_max__; ++k_0__) {
                    prior_lambda[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 39;
            context__.validate_dims("data initialization", "flag_varying_slope", "int", context__.to_vec());
            flag_varying_slope = int(0);
            vals_i__ = context__.vals_i("flag_varying_slope");
            pos__ = 0;
            flag_varying_slope = vals_i__[pos__++];
            check_greater_or_equal(function__, "flag_varying_slope", flag_varying_slope, 0);
            check_less_or_equal(function__, "flag_varying_slope", flag_varying_slope, 1);
            current_statement_begin__ = 40;
            context__.validate_dims("data initialization", "flag_thresholds", "int", context__.to_vec());
            flag_thresholds = int(0);
            vals_i__ = context__.vals_i("flag_thresholds");
            pos__ = 0;
            flag_thresholds = vals_i__[pos__++];
            check_greater_or_equal(function__, "flag_thresholds", flag_thresholds, 0);
            check_less_or_equal(function__, "flag_thresholds", flag_thresholds, 1);
            current_statement_begin__ = 41;
            context__.validate_dims("data initialization", "flag_replicates", "int", context__.to_vec());
            flag_replicates = int(0);
            vals_i__ = context__.vals_i("flag_replicates");
            pos__ = 0;
            flag_replicates = vals_i__[pos__++];
            check_greater_or_equal(function__, "flag_replicates", flag_replicates, 0);
            check_less_or_equal(function__, "flag_replicates", flag_replicates, 1);
            // initialize transformed data variables
            current_statement_begin__ = 46;
            S = int(0);
            stan::math::fill(S, std::numeric_limits<int>::min());
            stan::math::assign(S,max(pos_e));
            current_statement_begin__ = 47;
            validate_non_negative_index("m", "I", I);
            m = std::vector<int>(I, int(0));
            stan::math::fill(m, std::numeric_limits<int>::min());
            // execute transformed data statements
            current_statement_begin__ = 49;
            for (int i = 1; i <= I; ++i) {
                current_statement_begin__ = 50;
                stan::model::assign(m, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (get_base1(pos_s, i, "pos_s", 1) ? ((get_base1(pos_e, i, "pos_e", 1) - get_base1(pos_s, i, "pos_s", 1)) + 2) : 1 ), 
                            "assigning variable m");
            }
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 56;
            validate_non_negative_index("alpha", "(flag_varying_slope ? I : 1 )", (flag_varying_slope ? I : 1 ));
            num_params_r__ += (flag_varying_slope ? I : 1 );
            current_statement_begin__ = 57;
            validate_non_negative_index("beta_base_raw", "(I - 1)", (I - 1));
            num_params_r__ += (I - 1);
            current_statement_begin__ = 58;
            validate_non_negative_index("beta_step_raw", "S", S);
            num_params_r__ += S;
            current_statement_begin__ = 60;
            validate_non_negative_index("theta_resid", "J", J);
            num_params_r__ += J;
            current_statement_begin__ = 61;
            validate_non_negative_index("lambda", "K", K);
            num_params_r__ += K;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_edstan_model() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 56;
        if (!(context__.contains_r("alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        validate_non_negative_index("alpha", "(flag_varying_slope ? I : 1 )", (flag_varying_slope ? I : 1 ));
        context__.validate_dims("parameter initialization", "alpha", "vector_d", context__.to_vec((flag_varying_slope ? I : 1 )));
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha((flag_varying_slope ? I : 1 ));
        size_t alpha_j_1_max__ = (flag_varying_slope ? I : 1 );
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            alpha(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, alpha);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 57;
        if (!(context__.contains_r("beta_base_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_base_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_base_raw");
        pos__ = 0U;
        validate_non_negative_index("beta_base_raw", "(I - 1)", (I - 1));
        context__.validate_dims("parameter initialization", "beta_base_raw", "vector_d", context__.to_vec((I - 1)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_base_raw((I - 1));
        size_t beta_base_raw_j_1_max__ = (I - 1);
        for (size_t j_1__ = 0; j_1__ < beta_base_raw_j_1_max__; ++j_1__) {
            beta_base_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta_base_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_base_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 58;
        if (!(context__.contains_r("beta_step_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_step_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_step_raw");
        pos__ = 0U;
        validate_non_negative_index("beta_step_raw", "S", S);
        context__.validate_dims("parameter initialization", "beta_step_raw", "vector_d", context__.to_vec(S));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_step_raw(S);
        size_t beta_step_raw_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < beta_step_raw_j_1_max__; ++j_1__) {
            beta_step_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta_step_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_step_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 60;
        if (!(context__.contains_r("theta_resid")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable theta_resid missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("theta_resid");
        pos__ = 0U;
        validate_non_negative_index("theta_resid", "J", J);
        context__.validate_dims("parameter initialization", "theta_resid", "vector_d", context__.to_vec(J));
        Eigen::Matrix<double, Eigen::Dynamic, 1> theta_resid(J);
        size_t theta_resid_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < theta_resid_j_1_max__; ++j_1__) {
            theta_resid(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(theta_resid);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable theta_resid: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 61;
        if (!(context__.contains_r("lambda")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lambda missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lambda");
        pos__ = 0U;
        validate_non_negative_index("lambda", "K", K);
        context__.validate_dims("parameter initialization", "lambda", "vector_d", context__.to_vec(K));
        Eigen::Matrix<double, Eigen::Dynamic, 1> lambda(K);
        size_t lambda_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < lambda_j_1_max__; ++j_1__) {
            lambda(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(lambda);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lambda: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 56;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alpha;
            (void) alpha;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha = in__.vector_lb_constrain(0, (flag_varying_slope ? I : 1 ), lp__);
            else
                alpha = in__.vector_lb_constrain(0, (flag_varying_slope ? I : 1 ));
            current_statement_begin__ = 57;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta_base_raw;
            (void) beta_base_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_base_raw = in__.vector_constrain((I - 1), lp__);
            else
                beta_base_raw = in__.vector_constrain((I - 1));
            current_statement_begin__ = 58;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta_step_raw;
            (void) beta_step_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_step_raw = in__.vector_constrain(S, lp__);
            else
                beta_step_raw = in__.vector_constrain(S);
            current_statement_begin__ = 60;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> theta_resid;
            (void) theta_resid;  // dummy to suppress unused var warning
            if (jacobian__)
                theta_resid = in__.vector_constrain(J, lp__);
            else
                theta_resid = in__.vector_constrain(J);
            current_statement_begin__ = 61;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lambda;
            (void) lambda;  // dummy to suppress unused var warning
            if (jacobian__)
                lambda = in__.vector_constrain(K, lp__);
            else
                lambda = in__.vector_constrain(K);
            // transformed parameters
            current_statement_begin__ = 66;
            validate_non_negative_index("theta", "J", J);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> theta(J);
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta, DUMMY_VAR__);
            stan::math::assign(theta,add(multiply(W, lambda), theta_resid));
            current_statement_begin__ = 67;
            validate_non_negative_index("beta_base", "I", I);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta_base(I);
            stan::math::initialize(beta_base, DUMMY_VAR__);
            stan::math::fill(beta_base, DUMMY_VAR__);
            current_statement_begin__ = 68;
            validate_non_negative_index("beta_step", "S", S);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta_step(S);
            stan::math::initialize(beta_step, DUMMY_VAR__);
            stan::math::fill(beta_step, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 70;
            stan::model::assign(beta_base, 
                        stan::model::cons_list(stan::model::index_min_max(1, (I - 1)), stan::model::nil_index_list()), 
                        beta_base_raw, 
                        "assigning variable beta_base");
            current_statement_begin__ = 71;
            stan::model::assign(beta_base, 
                        stan::model::cons_list(stan::model::index_uni(I), stan::model::nil_index_list()), 
                        (-(1) * sum(beta_base_raw)), 
                        "assigning variable beta_base");
            current_statement_begin__ = 73;
            if (as_bool(flag_thresholds)) {
                current_statement_begin__ = 74;
                stan::math::assign(beta_step, stan::math::exp(beta_step_raw));
            } else {
                current_statement_begin__ = 76;
                stan::math::assign(beta_step, beta_step_raw);
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 66;
            size_t theta_j_1_max__ = J;
            for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(theta(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: theta" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable theta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 67;
            size_t beta_base_j_1_max__ = I;
            for (size_t j_1__ = 0; j_1__ < beta_base_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(beta_base(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: beta_base" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable beta_base: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 68;
            size_t beta_step_j_1_max__ = S;
            for (size_t j_1__ = 0; j_1__ < beta_step_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(beta_step(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: beta_step" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable beta_step: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            {
            current_statement_begin__ = 82;
            validate_non_negative_index("a", "I", I);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> a(I);
            stan::math::initialize(a, DUMMY_VAR__);
            stan::math::fill(a, DUMMY_VAR__);
            current_statement_begin__ = 84;
            if (as_bool(flag_varying_slope)) {
                current_statement_begin__ = 85;
                stan::math::assign(a, alpha);
            } else {
                current_statement_begin__ = 87;
                stan::math::assign(a, rep_vector(get_base1(alpha, 1, "alpha", 1), I));
            }
            current_statement_begin__ = 90;
            lp_accum__.add(normal_log<propto__>(theta_resid, 0, 1));
            current_statement_begin__ = 92;
            lp_accum__.add(lognormal_log<propto__>(alpha, get_base1(prior_alpha, 1, "prior_alpha", 1), get_base1(prior_alpha, 2, "prior_alpha", 1)));
            current_statement_begin__ = 93;
            lp_accum__.add(normal_log<propto__>(beta_base_raw, get_base1(prior_beta_base, 1, "prior_beta_base", 1), get_base1(prior_beta_base, 2, "prior_beta_base", 1)));
            current_statement_begin__ = 94;
            lp_accum__.add(normal_log<propto__>(beta_step_raw, get_base1(prior_beta_step, 1, "prior_beta_step", 1), get_base1(prior_beta_step, 2, "prior_beta_step", 1)));
            current_statement_begin__ = 96;
            for (int k = 1; k <= K; ++k) {
                current_statement_begin__ = 97;
                lp_accum__.add(normal_log<propto__>(get_base1(lambda, k, "lambda", 1), get_base1(get_base1(prior_lambda, k, "prior_lambda", 1), 1, "prior_lambda", 2), get_base1(get_base1(prior_lambda, k, "prior_lambda", 1), 2, "prior_lambda", 2)));
            }
            current_statement_begin__ = 100;
            if (as_bool(logical_eq(S, 0))) {
                current_statement_begin__ = 103;
                lp_accum__.add(bernoulli_logit_log<propto__>(y, subtract(elt_multiply(stan::model::rvalue(theta, stan::model::cons_list(stan::model::index_multi(jj), stan::model::nil_index_list()), "theta"), stan::model::rvalue(a, stan::model::cons_list(stan::model::index_multi(ii), stan::model::nil_index_list()), "a")), stan::model::rvalue(beta_base, stan::model::cons_list(stan::model::index_multi(ii), stan::model::nil_index_list()), "beta_base"))));
            } else if (as_bool(flag_thresholds)) {
                current_statement_begin__ = 108;
                for (int n = 1; n <= N; ++n) {
                    {
                    current_statement_begin__ = 110;
                    validate_non_negative_index("b", "get_base1(m, get_base1(ii, n, \"ii\", 1), \"m\", 1)", get_base1(m, get_base1(ii, n, "ii", 1), "m", 1));
                    Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b(get_base1(m, get_base1(ii, n, "ii", 1), "m", 1));
                    stan::math::initialize(b, DUMMY_VAR__);
                    stan::math::fill(b, DUMMY_VAR__);
                    current_statement_begin__ = 112;
                    if (as_bool(logical_gt(get_base1(m, get_base1(ii, n, "ii", 1), "m", 1), 1))) {
                        current_statement_begin__ = 113;
                        stan::math::assign(b, cumulative_sum(append_row(get_base1(beta_base, get_base1(ii, n, "ii", 1), "beta_base", 1), stan::model::rvalue(beta_step, stan::model::cons_list(stan::model::index_min_max(get_base1(pos_s, get_base1(ii, n, "ii", 1), "pos_s", 1), get_base1(pos_e, get_base1(ii, n, "ii", 1), "pos_e", 1)), stan::model::nil_index_list()), "beta_step"))));
                    } else {
                        current_statement_begin__ = 117;
                        stan::model::assign(b, 
                                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                    get_base1(beta_base, get_base1(ii, n, "ii", 1), "beta_base", 1), 
                                    "assigning variable b");
                    }
                    current_statement_begin__ = 120;
                    lp_accum__.add(ordered_logistic_log<propto__>((get_base1(y, n, "y", 1) + 1), (get_base1(a, get_base1(ii, n, "ii", 1), "a", 1) * get_base1(theta, get_base1(jj, n, "jj", 1), "theta", 1)), b));
                    }
                }
            } else {
                current_statement_begin__ = 127;
                for (int n = 1; n <= N; ++n) {
                    {
                    current_statement_begin__ = 129;
                    validate_non_negative_index("b", "get_base1(m, get_base1(ii, n, \"ii\", 1), \"m\", 1)", get_base1(m, get_base1(ii, n, "ii", 1), "m", 1));
                    Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b(get_base1(m, get_base1(ii, n, "ii", 1), "m", 1));
                    stan::math::initialize(b, DUMMY_VAR__);
                    stan::math::fill(b, DUMMY_VAR__);
                    current_statement_begin__ = 131;
                    if (as_bool(logical_gt(get_base1(m, get_base1(ii, n, "ii", 1), "m", 1), 1))) {
                        current_statement_begin__ = 132;
                        stan::math::assign(b, append_row(get_base1(beta_base, get_base1(ii, n, "ii", 1), "beta_base", 1), stan::model::rvalue(beta_step, stan::model::cons_list(stan::model::index_min_max(get_base1(pos_s, get_base1(ii, n, "ii", 1), "pos_s", 1), get_base1(pos_e, get_base1(ii, n, "ii", 1), "pos_e", 1)), stan::model::nil_index_list()), "beta_step")));
                    } else {
                        current_statement_begin__ = 134;
                        stan::model::assign(b, 
                                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                    get_base1(beta_base, get_base1(ii, n, "ii", 1), "beta_base", 1), 
                                    "assigning variable b");
                    }
                    current_statement_begin__ = 137;
                    lp_accum__.add(pcm(get_base1(y, n, "y", 1), (get_base1(a, get_base1(ii, n, "ii", 1), "a", 1) * get_base1(theta, get_base1(jj, n, "jj", 1), "theta", 1)), b, pstream__));
                    }
                }
            }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("alpha");
        names__.push_back("beta_base_raw");
        names__.push_back("beta_step_raw");
        names__.push_back("theta_resid");
        names__.push_back("lambda");
        names__.push_back("theta");
        names__.push_back("beta_base");
        names__.push_back("beta_step");
        names__.push_back("y_rep");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back((flag_varying_slope ? I : 1 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((I - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(I);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((flag_replicates ? N : 0 ));
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_edstan_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha = in__.vector_lb_constrain(0, (flag_varying_slope ? I : 1 ));
        size_t alpha_j_1_max__ = (flag_varying_slope ? I : 1 );
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            vars__.push_back(alpha(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_base_raw = in__.vector_constrain((I - 1));
        size_t beta_base_raw_j_1_max__ = (I - 1);
        for (size_t j_1__ = 0; j_1__ < beta_base_raw_j_1_max__; ++j_1__) {
            vars__.push_back(beta_base_raw(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_step_raw = in__.vector_constrain(S);
        size_t beta_step_raw_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < beta_step_raw_j_1_max__; ++j_1__) {
            vars__.push_back(beta_step_raw(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> theta_resid = in__.vector_constrain(J);
        size_t theta_resid_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < theta_resid_j_1_max__; ++j_1__) {
            vars__.push_back(theta_resid(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> lambda = in__.vector_constrain(K);
        size_t lambda_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < lambda_j_1_max__; ++j_1__) {
            vars__.push_back(lambda(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 66;
            validate_non_negative_index("theta", "J", J);
            Eigen::Matrix<double, Eigen::Dynamic, 1> theta(J);
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta, DUMMY_VAR__);
            stan::math::assign(theta,add(multiply(W, lambda), theta_resid));
            current_statement_begin__ = 67;
            validate_non_negative_index("beta_base", "I", I);
            Eigen::Matrix<double, Eigen::Dynamic, 1> beta_base(I);
            stan::math::initialize(beta_base, DUMMY_VAR__);
            stan::math::fill(beta_base, DUMMY_VAR__);
            current_statement_begin__ = 68;
            validate_non_negative_index("beta_step", "S", S);
            Eigen::Matrix<double, Eigen::Dynamic, 1> beta_step(S);
            stan::math::initialize(beta_step, DUMMY_VAR__);
            stan::math::fill(beta_step, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 70;
            stan::model::assign(beta_base, 
                        stan::model::cons_list(stan::model::index_min_max(1, (I - 1)), stan::model::nil_index_list()), 
                        beta_base_raw, 
                        "assigning variable beta_base");
            current_statement_begin__ = 71;
            stan::model::assign(beta_base, 
                        stan::model::cons_list(stan::model::index_uni(I), stan::model::nil_index_list()), 
                        (-(1) * sum(beta_base_raw)), 
                        "assigning variable beta_base");
            current_statement_begin__ = 73;
            if (as_bool(flag_thresholds)) {
                current_statement_begin__ = 74;
                stan::math::assign(beta_step, stan::math::exp(beta_step_raw));
            } else {
                current_statement_begin__ = 76;
                stan::math::assign(beta_step, beta_step_raw);
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t theta_j_1_max__ = J;
                for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                    vars__.push_back(theta(j_1__));
                }
                size_t beta_base_j_1_max__ = I;
                for (size_t j_1__ = 0; j_1__ < beta_base_j_1_max__; ++j_1__) {
                    vars__.push_back(beta_base(j_1__));
                }
                size_t beta_step_j_1_max__ = S;
                for (size_t j_1__ = 0; j_1__ < beta_step_j_1_max__; ++j_1__) {
                    vars__.push_back(beta_step(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 146;
            validate_non_negative_index("y_rep", "(flag_replicates ? N : 0 )", (flag_replicates ? N : 0 ));
            std::vector<int> y_rep((flag_replicates ? N : 0 ), int(0));
            stan::math::fill(y_rep, std::numeric_limits<int>::min());
            // generated quantities statements
            current_statement_begin__ = 148;
            if (as_bool(flag_replicates)) {
                {
                current_statement_begin__ = 150;
                validate_non_negative_index("a", "I", I);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> a(I);
                stan::math::initialize(a, DUMMY_VAR__);
                stan::math::fill(a, DUMMY_VAR__);
                current_statement_begin__ = 152;
                if (as_bool(flag_varying_slope)) {
                    current_statement_begin__ = 153;
                    stan::math::assign(a, alpha);
                } else {
                    current_statement_begin__ = 155;
                    stan::math::assign(a, rep_vector(get_base1(alpha, 1, "alpha", 1), I));
                }
                current_statement_begin__ = 158;
                if (as_bool(logical_eq(S, 0))) {
                    current_statement_begin__ = 161;
                    for (int n = 1; n <= N; ++n) {
                        current_statement_begin__ = 162;
                        stan::model::assign(y_rep, 
                                    stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                    bernoulli_logit_rng(((get_base1(theta, get_base1(jj, n, "jj", 1), "theta", 1) * get_base1(a, get_base1(ii, n, "ii", 1), "a", 1)) - get_base1(beta_base, get_base1(ii, n, "ii", 1), "beta_base", 1)), base_rng__), 
                                    "assigning variable y_rep");
                    }
                } else if (as_bool(flag_thresholds)) {
                    current_statement_begin__ = 169;
                    for (int n = 1; n <= N; ++n) {
                        {
                        current_statement_begin__ = 171;
                        validate_non_negative_index("b", "get_base1(m, get_base1(ii, n, \"ii\", 1), \"m\", 1)", get_base1(m, get_base1(ii, n, "ii", 1), "m", 1));
                        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b(get_base1(m, get_base1(ii, n, "ii", 1), "m", 1));
                        stan::math::initialize(b, DUMMY_VAR__);
                        stan::math::fill(b, DUMMY_VAR__);
                        current_statement_begin__ = 173;
                        if (as_bool(logical_gt(get_base1(m, get_base1(ii, n, "ii", 1), "m", 1), 1))) {
                            current_statement_begin__ = 174;
                            stan::math::assign(b, cumulative_sum(append_row(get_base1(beta_base, get_base1(ii, n, "ii", 1), "beta_base", 1), stan::model::rvalue(beta_step, stan::model::cons_list(stan::model::index_min_max(get_base1(pos_s, get_base1(ii, n, "ii", 1), "pos_s", 1), get_base1(pos_e, get_base1(ii, n, "ii", 1), "pos_e", 1)), stan::model::nil_index_list()), "beta_step"))));
                        } else {
                            current_statement_begin__ = 178;
                            stan::model::assign(b, 
                                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                        get_base1(beta_base, get_base1(ii, n, "ii", 1), "beta_base", 1), 
                                        "assigning variable b");
                        }
                        current_statement_begin__ = 181;
                        stan::model::assign(y_rep, 
                                    stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                    (ordered_logistic_rng((get_base1(a, get_base1(ii, n, "ii", 1), "a", 1) * get_base1(theta, get_base1(jj, n, "jj", 1), "theta", 1)), b, base_rng__) - 1), 
                                    "assigning variable y_rep");
                        }
                    }
                } else {
                    current_statement_begin__ = 188;
                    for (int n = 1; n <= N; ++n) {
                        {
                        current_statement_begin__ = 190;
                        validate_non_negative_index("b", "get_base1(m, get_base1(ii, n, \"ii\", 1), \"m\", 1)", get_base1(m, get_base1(ii, n, "ii", 1), "m", 1));
                        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b(get_base1(m, get_base1(ii, n, "ii", 1), "m", 1));
                        stan::math::initialize(b, DUMMY_VAR__);
                        stan::math::fill(b, DUMMY_VAR__);
                        current_statement_begin__ = 192;
                        if (as_bool(logical_gt(get_base1(m, get_base1(ii, n, "ii", 1), "m", 1), 1))) {
                            current_statement_begin__ = 193;
                            stan::math::assign(b, append_row(get_base1(beta_base, get_base1(ii, n, "ii", 1), "beta_base", 1), stan::model::rvalue(beta_step, stan::model::cons_list(stan::model::index_min_max(get_base1(pos_s, get_base1(ii, n, "ii", 1), "pos_s", 1), get_base1(pos_e, get_base1(ii, n, "ii", 1), "pos_e", 1)), stan::model::nil_index_list()), "beta_step")));
                        } else {
                            current_statement_begin__ = 195;
                            stan::model::assign(b, 
                                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                        get_base1(beta_base, get_base1(ii, n, "ii", 1), "beta_base", 1), 
                                        "assigning variable b");
                        }
                        current_statement_begin__ = 198;
                        stan::model::assign(y_rep, 
                                    stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                    pcm_rng((get_base1(a, get_base1(ii, n, "ii", 1), "a", 1) * get_base1(theta, get_base1(jj, n, "jj", 1), "theta", 1)), b, base_rng__, pstream__), 
                                    "assigning variable y_rep");
                        }
                    }
                }
                }
            }
            // validate, write generated quantities
            current_statement_begin__ = 146;
            size_t y_rep_k_0_max__ = (flag_replicates ? N : 0 );
            for (size_t k_0__ = 0; k_0__ < y_rep_k_0_max__; ++k_0__) {
                vars__.push_back(y_rep[k_0__]);
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_edstan_model";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t alpha_j_1_max__ = (flag_varying_slope ? I : 1 );
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_base_raw_j_1_max__ = (I - 1);
        for (size_t j_1__ = 0; j_1__ < beta_base_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_base_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_step_raw_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < beta_step_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_step_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t theta_resid_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < theta_resid_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_resid" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lambda_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < lambda_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t theta_j_1_max__ = J;
            for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t beta_base_j_1_max__ = I;
            for (size_t j_1__ = 0; j_1__ < beta_base_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_base" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t beta_step_j_1_max__ = S;
            for (size_t j_1__ = 0; j_1__ < beta_step_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_step" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t y_rep_k_0_max__ = (flag_replicates ? N : 0 );
        for (size_t k_0__ = 0; k_0__ < y_rep_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_rep" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t alpha_j_1_max__ = (flag_varying_slope ? I : 1 );
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_base_raw_j_1_max__ = (I - 1);
        for (size_t j_1__ = 0; j_1__ < beta_base_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_base_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_step_raw_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < beta_step_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_step_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t theta_resid_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < theta_resid_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_resid" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lambda_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < lambda_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t theta_j_1_max__ = J;
            for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t beta_base_j_1_max__ = I;
            for (size_t j_1__ = 0; j_1__ < beta_base_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_base" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t beta_step_j_1_max__ = S;
            for (size_t j_1__ = 0; j_1__ < beta_step_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_step" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t y_rep_k_0_max__ = (flag_replicates ? N : 0 );
        for (size_t k_0__ = 0; k_0__ < y_rep_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_rep" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_edstan_model_namespace::model_edstan_model stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
